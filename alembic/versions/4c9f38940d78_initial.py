"""initial

Revision ID: 4c9f38940d78
Revises: None
Create Date: 2025-10-13 14:11:26.931692

"""

# revision identifiers, used by Alembic.
revision = "4c9f38940d78"
down_revision = None

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
import sqlmodel

from alembic import context


def upgrade():
    schema_upgrades()
    if context.get_x_argument(as_dictionary=True).get("data", None):
        data_upgrades()


def downgrade():
    if context.get_x_argument(as_dictionary=True).get("data", None):
        data_downgrades()
    schema_downgrades()


def schema_upgrades():
    """schema upgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table(
        "users",
        sa.Column("username", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("email", sqlmodel.sql.sqltypes.AutoString(), nullable=False),
        sa.Column("is_active", sa.Boolean(), nullable=False),
        sa.Column("is_superuser", sa.Boolean(), nullable=False),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column(
            "hashed_password", sqlmodel.sql.sqltypes.AutoString(), nullable=False
        ),
        sa.Column(
            "auth_role",
            sa.Enum(
                "ADMIN",
                "PREMIUM",
                "BASIC",
                "UNCONFIRMED",
                "ANONYMOUS_PERMANENT",
                "ANONYMOUS",
                name="custom_roles",
            ),
            nullable=False,
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(op.f("ix_users_email"), "users", ["email"], unique=True)
    op.create_index(op.f("ix_users_username"), "users", ["username"], unique=True)
    op.create_table(
        "user_parameters",
        sa.Column("preferred_lat", sa.Float(), nullable=False),
        sa.Column("preferred_lon", sa.Float(), nullable=False),
        sa.Column(
            "uv_index_threshold", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column(
            "aqi_threshold", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column(
            "wind_speed_threshold",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column(
            "rain_chance_threshold",
            postgresql.JSONB(astext_type=sa.Text()),
            nullable=True,
        ),
        sa.Column(
            "pm10_threshold", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column(
            "pm2_5_threshold", postgresql.JSONB(astext_type=sa.Text()), nullable=True
        ),
        sa.Column("allergens", postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column("id", sa.Uuid(), nullable=False),
        sa.Column("user_id", sa.Uuid(), nullable=False),
        sa.Column(
            "time_created",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.Column(
            "time_updated",
            sa.TIMESTAMP(timezone=True),
            server_default=sa.text("now()"),
            nullable=False,
        ),
        sa.ForeignKeyConstraint(
            ["user_id"],
            ["users.id"],
        ),
        sa.PrimaryKeyConstraint("id"),
    )
    op.create_index(
        op.f("ix_user_parameters_id"), "user_parameters", ["id"], unique=True
    )
    op.create_index(
        op.f("ix_user_parameters_user_id"), "user_parameters", ["user_id"], unique=True
    )
    # ### end Alembic commands ###


def schema_downgrades():
    """schema downgrade migrations go here."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f("ix_user_parameters_user_id"), table_name="user_parameters")
    op.drop_index(op.f("ix_user_parameters_id"), table_name="user_parameters")
    op.drop_table("user_parameters")
    op.drop_index(op.f("ix_users_username"), table_name="users")
    op.drop_index(op.f("ix_users_email"), table_name="users")
    op.drop_table("users")
    # ### end Alembic commands ###


def data_upgrades():
    """Add any optional data upgrade migrations here!"""
    pass


def data_downgrades():
    """Add any optional data downgrade migrations here!"""
    pass
